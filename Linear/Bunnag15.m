function y = Bunnag15(x)
% -------------------------------------------------------------------------
% MATLAB coding by: Linas Stripinis
% Name:
%   Bunnag15.m
%
% Original source: 
% - Bunnag D. and  Sun M. (2005, December). Genetic algorithm for 
%   constrained global optimization in continuous variables. Applied 
%   Mathematics and Computation, 171(1), 604  -  636.
%
% Globally optimal solution:
%   f* = 49318.0179584158
%   x* = [0; 0; 0; 62.6086956522; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 4.3478260869; 0; 0; 0; 0]
%
% Default variable bounds:
%   0 <= x(i) <= 100, i = 1,...,n
%   
% Problem Properties:
%   n  = 20;
%   #g = 10;
%   #h = 0;  
% -------------------------------------------------------------------------
if nargin == 0
    y.nx = 20;
    y.ng = 10;
    y.nh = 0;
    y.xl = @(i) 0; 
    y.xu = @(i) 100;
    y.fmin = @(nx) get_fmin(nx);
    y.xmin = @(nx) get_xmin(nx);
    y.confun = @(i) funcon(i);
    return
end
if size(x, 2) > size(x, 1)
    x = x'; 
end
u = [ - 19; - 27; - 23; - 53; - 42; 26; - 33; - 23; 41; 19];
v = [ - 52; - 3; 81; 30; - 85; 68; 27; - 81; 97; - 73];
p = [42; 98; 48; 91; 11; 63; 61; 61; 38; 26];
d = [63; 15; 44; 91; 45; 50; 89; 58; 86; 82];
t1 = x(1:10);
t2 = x(11:20);
y =  - 0.5*sum(d.*(t1 - u).^2) + 0.5*sum(p.*(t2 - v).^2);
end

function [c, ceq] = funcon( x )
    c(1)  = 3*x(1) + 5*x(2) + 5*x(3) + 6*x(4) + 4*x(5) + 4*x(6) + 5*x(7) + 6*x(8) + 4*x(9) + 4*x(10) + 8*x(11) + 2*x(12) + 4*x(13) + 1*x(14) + 1*x(15) + 1*x(16) + 2*x(17) + 1*x(18) + 7*x(19) + 3*x(20) - 380;
    c(2)  = 5*x(1) + 4*x(2) + 5*x(3) + 4*x(4) + 1*x(5) + 4*x(6) + 4*x(7) + 2*x(8) + 5*x(9) + 2*x(10) + 3*x(11) + 6*x(12) + 1*x(13) + 7*x(14) + 7*x(15) + 5*x(16) + 8*x(17) + 7*x(18) + 2*x(19) + 1*x(20) - 415;
    c(3)  = 1*x(1) + 5*x(2) + 2*x(3) + 4*x(4) + 7*x(5) + 3*x(6) + 1*x(7) + 5*x(8) + 7*x(9) + 6*x(10) + 1*x(11) + 7*x(12) + 2*x(13) + 4*x(14) + 7*x(15) + 5*x(16) + 3*x(17) + 4*x(18) + 1*x(19) + 2*x(20) - 385;
    c(4)  = 3*x(1) + 2*x(2) + 6*x(3) + 3*x(4) + 2*x(5) + 1*x(6) + 6*x(7) + 1*x(8) + 7*x(9) + 3*x(10) + 7*x(11) + 7*x(12) + 8*x(13) + 2*x(14) + 3*x(15) + 4*x(16) + 5*x(17) + 8*x(18) + 1*x(19) + 2*x(20) - 405;
    c(5)  = 6*x(1) + 6*x(2) + 6*x(3) + 4*x(4) + 5*x(5) + 2*x(6) + 2*x(7) + 4*x(8) + 3*x(9) + 2*x(10) + 7*x(11) + 5*x(12) + 3*x(13) + 6*x(14) + 7*x(15) + 5*x(16) + 8*x(17) + 4*x(18) + 6*x(19) + 3*x(20) - 470;
    c(6)  = 5*x(1) + 5*x(2) + 2*x(3) + 1*x(4) + 3*x(5) + 5*x(6) + 5*x(7) + 7*x(8) + 4*x(9) + 3*x(10) + 4*x(11) + 1*x(12) + 7*x(13) + 3*x(14) + 8*x(15) + 3*x(16) + 1*x(17) + 6*x(18) + 2*x(19) + 8*x(20) - 415;
    c(7)  = 3*x(1) + 6*x(2) + 6*x(3) + 3*x(4) + 1*x(5) + 6*x(6) + 1*x(7) + 6*x(8) + 7*x(9) + 1*x(10) + 4*x(11) + 3*x(12) + 1*x(13) + 4*x(14) + 3*x(15) + 6*x(16) + 4*x(17) + 6*x(18) + 5*x(19) + 4*x(20) - 400;
    c(8)  = 1*x(1) + 2*x(2) + 1*x(3) + 7*x(4) + 8*x(5) + 7*x(6) + 6*x(7) + 5*x(8) + 8*x(9) + 7*x(10) + 2*x(11) + 3*x(12) + 5*x(13) + 5*x(14) + 4*x(15) + 5*x(16) + 4*x(17) + 2*x(18) + 2*x(19) + 8*x(20) - 460;
    c(9)  = 8*x(1) + 5*x(2) + 2*x(3) + 5*x(4) + 3*x(5) + 8*x(6) + 1*x(7) + 3*x(8) + 3*x(9) + 5*x(10) + 4*x(11) + 5*x(12) + 5*x(13) + 6*x(14) + 1*x(15) + 7*x(16) + 1*x(17) + 2*x(18) + 2*x(19) + 4*x(20) - 400;
    c(10) = 1*x(1) + 1*x(2) + 1*x(3) + 1*x(4) + 1*x(5) + 1*x(6) + 1*x(7) + 1*x(8) + 1*x(9) + 1*x(10) + 1*x(11) + 1*x(12) + 1*x(13) + 1*x(14) + 1*x(15) + 1*x(16) + 1*x(17) + 1*x(18) + 1*x(19) + 1*x(20) - 200;
    ceq   = [];
end

function fmin = get_fmin(~)
    fmin = 49318.0179584158;
end

function xmin = get_xmin(~)
    xmin = [0; 0; 0; 62.6086956522; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 4.3478260869; 0; 0; 0; 0];
end